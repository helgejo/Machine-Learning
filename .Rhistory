library(AppliedPredictiveModeling)
install.packages("caret")
install.packages("ggplot2")
install.packages("AppliedPredictiveModeling")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
summary(diagnosis)
head(diagnosis)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training)
hist(inTrain)
head(training)
hist(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
colnames(training)
training[,grep("IL", colnames(training))]
ILdata <-  training[,grep("IL", colnames(training))]
preProcess(ILdata)
x <- preProcess(ILdata)
x
x <- preProcess(ILdata, method = c("center", "scale"), thresh = 0.90)
x
x <- preProcess(ILdata, method = "pca", thresh = 0.90)
x
ILdata <-  training[,grep("IL_", colnames(training))]
x <- preProcess(ILdata, method = "pca", thresh = 0.90)
x
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ILdata <-  training[,grep("IL_", colnames(training))]
ILdata
colnames(training)
ILdata <-  training[,grep("^IL_", colnames(training))]
colnames(ILdata)
preProc <- preProcess(log10(ILdata+1),method="pca", thresh = 0.90)
plot(ILdata)
preProc <- preProcess(ILdata,method="pca", thresh = 0.90)
preProc
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
colnames(training)
ILdata <-  training[,grep(c("^IL_", "diagnosis"), colnames(training))]
ILdata <-  training[,grep("^IL_" || "diagnosis", colnames(training))]
ILdata <-  training[,grep("^IL_ || diagnosis", colnames(training))]
colnames(ILdata)
ILdata <- cbind(training[,1])
colnames(ILdata)
ILdata <-  training[,grep(c("^IL_", "diagnosis"), colnames(training))]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ILdata <-  training[,grep(c("^IL_", "diagnosis"), colnames(training))]
ILdata <-  training[,grep("^IL_", colnames(training))]
colnames(ILdata)
ILdata <- cbind(training[1,])
colnames(ILdata)
ILdata <-  training[,grep("^IL_", colnames(training))]
colnames(ILdata)
ILdata <- cbind(training[,1])
colnames(ILdata)
ILdata <-  training[,grep("^IL_", colnames(training))]
ILdata <- rbind(training[1,])
colnames(ILdata)
ILdata <-  training[,grep("^IL_", colnames(training))]
ILdata$diagnosis <- training[,1]
colnames(ILdata)
head(ILdata)
preP<-preProcess(ILdata[,-13], method = "pca", thresh = 0.9)
prep
preP
preP<-preProcess(ILdata[,-13], method = "pca", thresh = 0.8)
preP
preT <- train(preP, ILdata$diagnosis, method= "glm")
preT <- train(preP, ILdata[,13], method= "glm")
install.packages('caret', dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
preT <- train(preP, ILdata[,13], method= "glm")
trainPC <- predict(preP)
tranPC
trainPC
trainPC <- predict(preP, ILdata[,-13])
trainPC
modelFit <- train(ILdata$diagnosis ~ .,method="glm",data=trainPC)
modelFit
colnames(testing)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
testData = testing[,grep("^IL_", colnames(testing))]
testData$diagnosis <- testing[,1]
ILdata <-  training[,grep("^IL_", colnames(training))]
ILdata$diagnosis <- training[,1]
preP<-preProcess(ILdata[,-13], method = "pca", thresh = 0.8)
trainPC <- predict(preP, ILdata[,-13])
modelFit <- train(ILdata$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preP,testData[,-13])
# compare results
confusionMatrix(testData$diagnosis, predict(modelFit,testPC))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
testData = testing[,grep("^IL_", colnames(testing))]
testData$diagnosis <- testing[,1]
ILdata <-  training[,grep("^IL_", colnames(training))]
ILdata$diagnosis <- training[,1]
##preP<-preProcess(ILdata[,-13], method = "pca", thresh = 0.8)
##trainPC <- predict(preP, ILdata[,-13])
modelFit <- train(ILdata$diagnosis ~ .,method="glm",data=ILdata)
##testPC <- predict(preP,testData[,-13])
# compare results
confusionMatrix(testData$diagnosis, predict(modelFit,testData[,-13]))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
summary(segmentationOriginal)
head(segmentationOriginal)
set.seed(125)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.75, list = FALSE)
training <- segmentationOriginal[inTrain]
testing <- segmentationOriginal[-inTrain]
modelFit <- train(Case ~., data= training, method="rpart")
set.seed(125)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.75, list = FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
modelFit <- train(Case ~., data= training, method="rpart")
modelFit
print(modelFit$finalModel)
library(rattle)
install.packages("rattle")
library(rattle)
load(makeCacheMatrix)
plot(modelFit$finalModel, uniform = TRUE, main = "Classification Tree")
text(modelFit$finalModel, use.n = TRUE, all = TRUE, cex= .8)
modelFit$finalModel
training$Case
head(training)
training <- segmentationOriginal[Case = "Train"]
testing <- segmentationOriginal[Case = "Test"]
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
training <- segmentationOriginal[Case = "Train"]
training <- segmentationOriginal[Case = "Train",]
training <- segmentationOriginal[Case == "Train"]
training <- segmentationOriginal[which(Case == "Train")]
training <- segmentationOriginal[which(segmentationOriginal$Case == "Train")]
training <- segmentationOriginal[which(segmentationOriginal$Case == "Train"),]
training
testing <- segmentationOriginal[which(segmentationOriginal$Case == "Test"),]
head(testing)
modelFit <- train(Class ~., data= training, method="rpart")
modelFit
modelFit$finalModel
fancyRpartPlot(modelFit$finalModel)
plot(modelFit$finalModel, uniform = TRUE)
text(modelFit$finalModel, use.n = TRUE, all= TRUE)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
head(olice)
head(olive)
library(tree)
install.packages("tree")
library(tree)
head(olive)
tree(Area ~., data = olive)
treeOlive <- tree(Area ~., data = olive)
newdata = as.data.frame(t(colMeans(olive)))
newdata
predict(treeOlive, newdata)
args(predict)
data(olive)
head(olive)
olive = olive[,-1]
head(olive)
set.seed(125)
treeOlive <- tree(Area ~., data = olive)
treeOlive
newdata = as.data.frame(t(colMeans(olive)))
newdata
predict(treeOlive, newdata)
predict(treeOlive, newdata= newdata)
predict(treeOlive, newdata = newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages(ElemStatLearn)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
head(train)
head(trainSA)
missClass = function(values,prediction){
sum(((prediction > 0.5)*1) != values)/length(values)
}
modelFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data= trainSA, method="glm", family="binomial")
modelFit <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data= trainSA, family="binomial")
modelFit
trying <- predict(modelFit, type = "response")
trying.miss <- missClass(trainSA$chd, trying)
trying.miss
testingSet <- predict(modelFit, newdata = testSA, type = "response")
testingSet.miss <- missClass(testSA$chd, testingSet)
testingSet.miss
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
vowel.train[y] <- factor(vowel.train[y])
vowel.train[1,] <- factor(vowel.train[1,])
tree <- tree(as.factor(vowel.train$y) ~., data = vowel.train)
tree
varImp(tree)
tree <- train(as.factor(vowel.train$y) ~., data = vowel.train, method = "rf")
rfNews()
varImp(tree)
read.csv("pml-training.csv")
data <- read.csv("pml-training.csv")
head(data)
colnames(data)
training <- read.csv("pml-training.csv", na.strings = c("NA", "#DIV/0!", ""))
head(training)
trainfilt <- training[,-c(1:6)]
trainfilt<- apply(trainfilt,c(1:153),as.numeric)
trainfilt<- apply(trainfilt,c(1:153),as.numeric)
head(trainfilt)
trainfilt<- apply(trainfilt,c(,1:153),as.numeric)
trainfilt<- apply(trainfilt,c(1,1:153),as.numeric)
trainfilt<- apply(trainfilt,c(19622,153),as.numeric)
trainfilt<- apply(trainfilt,c(1,2),as.numeric)
training <- read.csv("pml-training.csv", na.strings = c("NA", "#DIV/0!", ""))
trainfilt <- training[,-c(1:6)]
trainfilt<- apply(trainfilt,as.numeric)
trainfilt<- apply(trainfilt,,as.numeric)
lirarby(randomForest)
library(randomForest)
library(ISLR); library(ggplot2); library(caret); library(Hmisc)
set.seed(96)
training <- read.csv("pml-training.csv", na.strings = c("NA", "#DIV/0!", ""))
#testing <- read.csv("pml-testing.csv", na.strings = c("NA", "#DIV/0!", ""))
#testing <- testing[which(testing$problem_id == 1),]
#featurePlot(x=training, y=training$classe, plot="pairs")
#featurePlot(x=training[,c(11:15)], y = training$classe,plot="pairs")
#Remove first uneccessary columns of username and timestamps --> 154 columns
trainfilt <- training[,-c(1:6)]
# make all into type numeric
for(i in c(2:ncol(trainfilt)-1)){
trainfilt[,i] = as.numeric(as.character(trainfilt[,i]))
}
# remove columns with almost all NA values
trainfilt <- trainfilt[colnames(trainfilt[colSums(is.na(trainfilt))==0])]
inTrain <- createDataPartition(trainfilt$classe, p = 0.75, list = FALSE)
trainfilt.train <- trainfilt[inTrain,]
trainfilt.test <- trainfilt[-inTrain,]
model <- randomForest(classe ~., data= trainfilt.train)
print(model)
predictionsTrain <- predict(model, newdata=trainfilt.train)
confusionMatrix(predictionsTrain,training$classe)
predictionsTrain
confusionMatrix(predictionsTrain,training$classe)
nrow(training$classe)
confusionMatrix(predictionsTrain,trainfilt.train$classe)
predictionsTe <- predict(model, newdata=trainfilt.test)
confusionMatrix(predictionsTe,trainfilt.test$classe)

install.packages("randomForest")
library(randomForest)
library(ISLR); library(ggplot2); library(caret); library(Hmisc);
install.packages("caret")
install.packages("ISLR")
install.packages("Hmisc")
library(ISLR); library(ggplot2); library(caret); library(Hmisc); library(randomForest)
source('E:/Github/Machine-Learning/assignment_rf.R', echo=TRUE)
install.packages("e1071")
library(e1071)
confusionMatrix(predictionsTrain,trainfilt.train$classe)
predictionsTe <- predict(model, newdata=trainfilt.test)
confusionMatrix(predictionsTe,trainfilt.test$classe)
train_control <- trainControl(method="cv", number=10)
# train the model
model_cvRF <- train(classe~., data=trainfilt.train, trControl=train_control, method="rf")
train_control <- trainControl(method="cv", number=3)
# train the model
model_cvRF <- train(classe~., data=trainfilt.train, trControl=train_control, method="rf")
# make predictions
predictions_cvRF <- predict(model, newdata=trainfilt.train)
# summarize results
confusionMatrix(predictions, trainfilt.train$classe)
confusionMatrix(predictions_cvRF, trainfilt.train$classe)
predictions_cvRF <- predict(model_cvRF, newdata=trainfilt.train)
# summarize results
confusionMatrix(predictions_cvRF, trainfilt.train$classe)
predictions_cvRF <- predict(model_cvRF, newdata=trainfilt.test)
# summarize results
confusionMatrix(predictions_cvRF, trainfilt.test$classe)
importance <- varImp(model_cvRF, scale=FALSE)
# summarize importance
print(importance)
# plot importance
plot(importance)
head(importance)
importance[1]
importance[1][2]
importance[[2]]
importance[[1]]
as.data.frame(importance)
as.data.frame(varImp(model_cvRF, scale=FALSE))
names(importance)
importance
rownames(importance)[order(importance$Overall, decreasing = TRUE)[1:20]]
rownames(importance)[order(importance$Overall, decreasing = TRUE)[2:20]]
rownames(importance)[order(importance$Overall, decreasing = TRUE)
rownames(importance)[order(importance$Overall, decreasing = TRUE)]
rownames(importance)
importance
